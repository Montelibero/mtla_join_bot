import logging
from typing import List, Dict
from .user_states import UserStateManager
from . import messages

logger = logging.getLogger(__name__)

class AdminTools:
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.state_manager = UserStateManager()
    
    def get_user_statistics(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ"""
        try:
            stats = self.state_manager.get_user_statistics()
            
            if not stats:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
            
            result = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            result += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
            result += f"‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å: {stats.get('completed_users', 0)}\n"
            result += f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24 —á–∞—Å–∞: {stats.get('active_users', 0)}\n\n"
            
            result += "üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º:\n"
            state_dist = stats.get('state_distribution', {})
            for state, count in state_dist.items():
                state_name = self._get_state_name(state)
                result += f"  {state_name}: {count}\n"
            
            return result
        except Exception as e:
            logger.error(f"Error getting statistics: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"
    
    def get_incomplete_users_report(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"""
        try:
            incomplete_users = self.state_manager.get_incomplete_users()
            
            if not incomplete_users:
                return "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å! üéâ"
            
            result = f"üìã –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(incomplete_users)}):\n\n"
            
            for user in incomplete_users[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20
                username = user.get('username', 'Unknown')
                state = user.get('state', 'Unknown')
                state_name = self._get_state_name(state)
                created = user.get('created_at', 'Unknown')
                
                result += f"üë§ @{username}\n"
                result += f"   üìç –°–æ—Å—Ç–æ—è–Ω–∏–µ: {state_name}\n"
                result += f"   üìÖ –°–æ–∑–¥–∞–Ω: {created}\n\n"
            
            if len(incomplete_users) > 20:
                result += f"... –∏ –µ—â–µ {len(incomplete_users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            return result
        except Exception as e:
            logger.error(f"Error getting incomplete users: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}"
    
    def get_reminder_candidates(self, days_inactive: int = 7) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            reminder_users = self.state_manager.get_users_for_reminder(days_inactive)
            
            if not reminder_users:
                return f"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã –±–æ–ª–µ–µ {days_inactive} –¥–Ω–µ–π)"
            
            result = f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({len(reminder_users)}):\n\n"
            
            for user in reminder_users[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 15
                username = user.get('username', 'Unknown')
                state = user.get('state', 'Unknown')
                state_name = self._get_state_name(state)
                last_activity = user.get('last_activity', 'Unknown')
                
                result += f"üë§ @{username}\n"
                result += f"   üìç –°–æ—Å—Ç–æ—è–Ω–∏–µ: {state_name}\n"
                result += f"   ‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n\n"
            
            if len(reminder_users) > 15:
                result += f"... –∏ –µ—â–µ {len(reminder_users) - 15} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            return result
        except Exception as e:
            logger.error(f"Error getting reminder candidates: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}"
    
    def get_user_details(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            user = self.state_manager.get_user(user_id)
            
            if not user:
                return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            result = f"üë§ –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username}:\n\n"
            result += f"üÜî ID: {user.user_id}\n"
            result += f"üåê –Ø–∑—ã–∫: {user.language}\n"
            result += f"üìç –°–æ—Å—Ç–æ—è–Ω–∏–µ: {self._get_state_name(user.state)}\n"
            result += f"üìÖ –°–æ–∑–¥–∞–Ω: {user.created_at}\n"
            result += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_activity}\n\n"
            
            result += "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
            if user.progress:
                progress = user.progress
                result += f"  ‚úÖ –Æ–∑–µ—Ä–Ω–µ–π–º: {'–î–∞' if progress.get('username_check') else '–ù–µ—Ç'}\n"
                result += f"  ‚úÖ –°–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏: {'–î–∞' if progress.get('agreement') else '–ù–µ—Ç'}\n"
                result += f"  ‚úÖ –ê–¥—Ä–µ—Å –≤–≤–µ–¥–µ–Ω: {'–î–∞' if progress.get('address_entered') else '–ù–µ—Ç'}\n"
                result += f"  ‚úÖ –õ–∏–Ω–∏—è –¥–æ–≤–µ—Ä–∏—è: {'–î–∞' if progress.get('trustline_check') else '–ù–µ—Ç'}\n"
                result += f"  ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {'–î–∞' if progress.get('recommendation') else '–ù–µ—Ç'}\n"
            
            if user.stellar_address:
                result += f"\nüíé –°—Ç–µ–ª–ª–∞—Ä –∞–¥—Ä–µ—Å: {user.stellar_address}"
            
            if user.recommender_username:
                result += f"\nüë• –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å: @{user.recommender_username}"
            
            return result
        except Exception as e:
            logger.error(f"Error getting user details: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π: {e}"
    
    def _get_state_name(self, state: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"""
        state_names = {
            'checking_username': '–ü—Ä–æ–≤–µ—Ä–∫–∞ —é–∑–µ—Ä–Ω–µ–π–º–∞',
            'agreement': '–°–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏',
            'entering_address': '–í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞',
            'checking_address': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
        }
        return state_names.get(state, state)
    
    def close_connection(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        self.state_manager.close_connection()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    admin = AdminTools()
    
    print("=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===")
    print(admin.get_user_statistics())
    
    print("\n=== –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ===")
    print(admin.get_incomplete_users_report())
    
    print("\n=== –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ===")
    print(admin.get_reminder_candidates())
    
    admin.close_connection()
